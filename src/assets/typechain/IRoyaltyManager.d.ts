/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRoyaltyManagerInterface extends ethers.utils.Interface {
  functions: {
    "claimRoyalties(address)": FunctionFragment;
    "claimableRoyalties(address)": FunctionFragment;
    "payableRoyalties((address,uint256),uint256)": FunctionFragment;
    "transferPlatformFee(address,address,uint256)": FunctionFragment;
    "transferRoyalty(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRoyalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRoyalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payableRoyalties",
    values: [{ contentAddress: string; tokenId: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlatformFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRoyalty",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payableRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRoyalty",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRoyaltyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRoyaltyManagerInterface;

  functions: {
    claimRoyalties(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableRoyalties(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    payableRoyalties(
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        receiver: string;
        fee: BigNumber;
        remaining: BigNumber;
      }
    >;

    "transferPlatformFee(address,address,uint256)"(
      _sender: string,
      _token: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferPlatformFee(address,uint256,uint256)"(
      _token: string,
      _orderId: BigNumberish,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferRoyalty(address,address,address,uint256)"(
      _sender: string,
      _token: string,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRoyalties(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableRoyalties(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  payableRoyalties(
    _asset: { contentAddress: string; tokenId: BigNumberish },
    _total: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      receiver: string;
      fee: BigNumber;
      remaining: BigNumber;
    }
  >;

  "transferPlatformFee(address,address,uint256)"(
    _sender: string,
    _token: string,
    _total: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferPlatformFee(address,uint256,uint256)"(
    _token: string,
    _orderId: BigNumberish,
    _total: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferRoyalty(address,address,address,uint256)"(
    _sender: string,
    _token: string,
    _receiver: string,
    _royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferRoyalty(uint256,address,uint256)"(
    _orderId: BigNumberish,
    _receiver: string,
    _royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRoyalties(_user: string, overrides?: CallOverrides): Promise<void>;

    claimableRoyalties(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    payableRoyalties(
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        receiver: string;
        fee: BigNumber;
        remaining: BigNumber;
      }
    >;

    "transferPlatformFee(address,address,uint256)"(
      _sender: string,
      _token: string,
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPlatformFee(address,uint256,uint256)"(
      _token: string,
      _orderId: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferRoyalty(address,address,address,uint256)"(
      _sender: string,
      _token: string,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claimRoyalties(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableRoyalties(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payableRoyalties(
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferPlatformFee(address,address,uint256)"(
      _sender: string,
      _token: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferPlatformFee(address,uint256,uint256)"(
      _token: string,
      _orderId: BigNumberish,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferRoyalty(address,address,address,uint256)"(
      _sender: string,
      _token: string,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRoyalties(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableRoyalties(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payableRoyalties(
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferPlatformFee(address,address,uint256)"(
      _sender: string,
      _token: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferPlatformFee(address,uint256,uint256)"(
      _token: string,
      _orderId: BigNumberish,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferRoyalty(address,address,address,uint256)"(
      _sender: string,
      _token: string,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _receiver: string,
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
