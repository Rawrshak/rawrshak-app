/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidityMiningInterface extends ethers.utils.Interface {
  functions: {
    "__LiquidityMining_init_unchained(address,address,address,address)": FunctionFragment;
    "dai()": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "firstStakeTime()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payout(address)": FunctionFragment;
    "rawr()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueTokens(address,address,uint256)": FunctionFragment;
    "stake(uint256,uint256,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalClaimedRewards()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "totalStake()": FunctionFragment;
    "totalStakeDai()": FunctionFragment;
    "totalStakeUsdc()": FunctionFragment;
    "totalStakeUsdt()": FunctionFragment;
    "totalStakers()": FunctionFragment;
    "totalUserStake(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "usdt()": FunctionFragment;
    "userClaimedRewards(address)": FunctionFragment;
    "userStakeDai(address)": FunctionFragment;
    "userStakeUsdc(address)": FunctionFragment;
    "userStakeUsdt(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__LiquidityMining_init_unchained",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstStakeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values: [string]): string;
  encodeFunctionData(functionFragment: "rawr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeUsdc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userClaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakeDai",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakeUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakeUsdt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "__LiquidityMining_init_unchained",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rawr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakeDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakeUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakeUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payout(address,uint256,address)": EventFragment;
    "Stake(address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    totalRewards: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PayoutEvent = TypedEvent<
  [string, BigNumber, string] & {
    staker: string;
    reward: BigNumber;
    to: string;
  }
>;

export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    staker: string;
    usdcIn: BigNumber;
    usdtIn: BigNumber;
    daiIn: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    staker: string;
    usdcOut: BigNumber;
    usdtOut: BigNumber;
    daiOut: BigNumber;
    to: string;
  }
>;

export class LiquidityMining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidityMiningInterface;

  functions: {
    __LiquidityMining_init_unchained(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _totalRewards: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstStakeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawr(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokens(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      usdcIn: BigNumberish,
      usdtIn: BigNumberish,
      daiIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    totalStakeDai(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDai: BigNumber }>;

    totalStakeUsdc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalUsdc: BigNumber }>;

    totalStakeUsdt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalUsdt: BigNumber }>;

    totalStakers(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    userClaimedRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStakeDai(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { daiStake: BigNumber }>;

    userStakeUsdc(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdcStake: BigNumber }>;

    userStakeUsdt(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdtStake: BigNumber }>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __LiquidityMining_init_unchained(
    _usdc: string,
    _usdt: string,
    _dai: string,
    _rawr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dai(overrides?: CallOverrides): Promise<string>;

  deposit(
    _totalRewards: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _usdc: string,
    _usdt: string,
    _dai: string,
    _rawr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawr(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokens(
    tokenToRescue: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    usdcIn: BigNumberish,
    usdtIn: BigNumberish,
    daiIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakeDai(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakeUsdc(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakeUsdt(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  usdt(overrides?: CallOverrides): Promise<string>;

  userClaimedRewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStakeDai(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  userStakeUsdc(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  userStakeUsdt(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __LiquidityMining_init_unchained(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dai(overrides?: CallOverrides): Promise<string>;

    deposit(
      _totalRewards: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    rawr(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueTokens(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      usdcIn: BigNumberish,
      usdtIn: BigNumberish,
      daiIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeDai(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeUsdc(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    usdt(overrides?: CallOverrides): Promise<string>;

    userClaimedRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakeDai(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakeUsdc(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakeUsdt(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        usdcOut: BigNumber;
        usdtOut: BigNumber;
        daiOut: BigNumber;
        reward: BigNumber;
      }
    >;
  };

  filters: {
    "Deposit(uint256,uint256,uint256)"(
      totalRewards?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { totalRewards: BigNumber; startTime: BigNumber; endTime: BigNumber }
    >;

    Deposit(
      totalRewards?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { totalRewards: BigNumber; startTime: BigNumber; endTime: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Payout(address,uint256,address)"(
      staker?: string | null,
      reward?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { staker: string; reward: BigNumber; to: string }
    >;

    Payout(
      staker?: string | null,
      reward?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { staker: string; reward: BigNumber; to: string }
    >;

    "Stake(address,uint256,uint256,uint256)"(
      staker?: string | null,
      usdcIn?: null,
      usdtIn?: null,
      daiIn?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { staker: string; usdcIn: BigNumber; usdtIn: BigNumber; daiIn: BigNumber }
    >;

    Stake(
      staker?: string | null,
      usdcIn?: null,
      usdtIn?: null,
      daiIn?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { staker: string; usdcIn: BigNumber; usdtIn: BigNumber; daiIn: BigNumber }
    >;

    "Withdraw(address,uint256,uint256,uint256,address)"(
      staker?: string | null,
      usdcOut?: null,
      usdtOut?: null,
      daiOut?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        staker: string;
        usdcOut: BigNumber;
        usdtOut: BigNumber;
        daiOut: BigNumber;
        to: string;
      }
    >;

    Withdraw(
      staker?: string | null,
      usdcOut?: null,
      usdtOut?: null,
      daiOut?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        staker: string;
        usdcOut: BigNumber;
        usdtOut: BigNumber;
        daiOut: BigNumber;
        to: string;
      }
    >;
  };

  estimateGas: {
    __LiquidityMining_init_unchained(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _totalRewards: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawr(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokens(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      usdcIn: BigNumberish,
      usdtIn: BigNumberish,
      daiIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeDai(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeUsdc(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    userClaimedRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakeDai(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakeUsdc(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakeUsdt(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __LiquidityMining_init_unchained(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _totalRewards: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstStakeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _usdc: string,
      _usdt: string,
      _dai: string,
      _rawr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      usdcIn: BigNumberish,
      usdtIn: BigNumberish,
      daiIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeUsdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeUsdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userClaimedRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakeDai(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakeUsdc(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakeUsdt(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
