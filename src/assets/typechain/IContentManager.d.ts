/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IContentManagerInterface extends ethers.utils.Interface {
  functions: {
    "accessControlManager()": FunctionFragment;
    "addAssetBatch(tuple[])": FunctionFragment;
    "content()": FunctionFragment;
    "contentStorage()": FunctionFragment;
    "registerOperators(tuple[])": FunctionFragment;
    "setContractRoyalty(address,uint24)": FunctionFragment;
    "setHiddenUriBatch(tuple[])": FunctionFragment;
    "setPublicUriBatch(tuple[])": FunctionFragment;
    "setTokenRoyaltiesBatch(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessControlManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetBatch",
    values: [
      {
        publicDataUri: string;
        hiddenDataUri: string;
        maxSupply: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "content", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contentStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperators",
    values: [{ operator: string; approved: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractRoyalty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHiddenUriBatch",
    values: [{ tokenId: BigNumberish; uri: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicUriBatch",
    values: [{ tokenId: BigNumberish; uri: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyaltiesBatch",
    values: [
      {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contentStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHiddenUriBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicUriBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyaltiesBatch",
    data: BytesLike
  ): Result;

  events: {};
}

export class IContentManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IContentManagerInterface;

  functions: {
    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    addAssetBatch(
      _assets: {
        publicDataUri: string;
        hiddenDataUri: string;
        maxSupply: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    content(overrides?: CallOverrides): Promise<[string]>;

    contentStorage(overrides?: CallOverrides): Promise<[string]>;

    registerOperators(
      _operators: { operator: string; approved: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractRoyalty(
      _receiver: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHiddenUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoyaltiesBatch(
      _assets: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  addAssetBatch(
    _assets: {
      publicDataUri: string;
      hiddenDataUri: string;
      maxSupply: BigNumberish;
      royaltyReceiver: string;
      royaltyRate: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  content(overrides?: CallOverrides): Promise<string>;

  contentStorage(overrides?: CallOverrides): Promise<string>;

  registerOperators(
    _operators: { operator: string; approved: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractRoyalty(
    _receiver: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHiddenUriBatch(
    _assets: { tokenId: BigNumberish; uri: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicUriBatch(
    _assets: { tokenId: BigNumberish; uri: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoyaltiesBatch(
    _assets: {
      tokenId: BigNumberish;
      royaltyReceiver: string;
      royaltyRate: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessControlManager(overrides?: CallOverrides): Promise<string>;

    addAssetBatch(
      _assets: {
        publicDataUri: string;
        hiddenDataUri: string;
        maxSupply: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    content(overrides?: CallOverrides): Promise<string>;

    contentStorage(overrides?: CallOverrides): Promise<string>;

    registerOperators(
      _operators: { operator: string; approved: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setContractRoyalty(
      _receiver: string,
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHiddenUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoyaltiesBatch(
      _assets: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    addAssetBatch(
      _assets: {
        publicDataUri: string;
        hiddenDataUri: string;
        maxSupply: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    content(overrides?: CallOverrides): Promise<BigNumber>;

    contentStorage(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperators(
      _operators: { operator: string; approved: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractRoyalty(
      _receiver: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHiddenUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoyaltiesBatch(
      _assets: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControlManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAssetBatch(
      _assets: {
        publicDataUri: string;
        hiddenDataUri: string;
        maxSupply: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    content(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contentStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperators(
      _operators: { operator: string; approved: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractRoyalty(
      _receiver: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHiddenUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicUriBatch(
      _assets: { tokenId: BigNumberish; uri: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoyaltiesBatch(
      _assets: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
