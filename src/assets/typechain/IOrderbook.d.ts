/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOrderbookInterface extends ethers.utils.Interface {
  functions: {
    "cancelOrders(uint256[])": FunctionFragment;
    "claimOrders(uint256[])": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "fillOrders(uint256[],uint256[])": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getOrderAmounts(uint256[])": FunctionFragment;
    "getPaymentTotals(uint256[],uint256[])": FunctionFragment;
    "ordersLength()": FunctionFragment;
    "placeOrder(((address,uint256),address,address,uint256,uint256,bool))": FunctionFragment;
    "verifyAllOrdersData(uint256[],bool)": FunctionFragment;
    "verifyOrderOwners(uint256[],address)": FunctionFragment;
    "verifyOrdersExist(uint256[])": FunctionFragment;
    "verifyOrdersReady(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrders",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderAmounts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentTotals",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [
      {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAllOrdersData",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrderOwners",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrdersExist",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrdersReady",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAllOrdersData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrderOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrdersExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrdersReady",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOrderbook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOrderbookInterface;

  functions: {
    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fillOrders(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amountOrdered: BigNumber;
          amountFilled: BigNumber;
          isBuyOrder: boolean;
          state: number;
        }
      ]
    >;

    getOrderAmounts(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { orderAmounts: BigNumber[] }>;

    getPaymentTotals(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        volume: BigNumber;
        amountPerOrder: BigNumber[];
      }
    >;

    ordersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyAllOrdersData(
      _orderIds: BigNumberish[],
      _isBuyOrder: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyOrderOwners(
      _orderIds: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyOrdersExist(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyOrdersReady(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  cancelOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(_orderId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  fillOrders(
    _orderIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      asset: [string, BigNumber] & {
        contentAddress: string;
        tokenId: BigNumber;
      };
      owner: string;
      token: string;
      price: BigNumber;
      amountOrdered: BigNumber;
      amountFilled: BigNumber;
      isBuyOrder: boolean;
      state: number;
    }
  >;

  getOrderAmounts(
    _orderIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPaymentTotals(
    _orderIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      volume: BigNumber;
      amountPerOrder: BigNumber[];
    }
  >;

  ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

  placeOrder(
    _order: {
      asset: { contentAddress: string; tokenId: BigNumberish };
      owner: string;
      token: string;
      price: BigNumberish;
      amount: BigNumberish;
      isBuyOrder: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyAllOrdersData(
    _orderIds: BigNumberish[],
    _isBuyOrder: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyOrderOwners(
    _orderIds: BigNumberish[],
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyOrdersExist(
    _orderIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyOrdersReady(
    _orderIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exists(_orderId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    fillOrders(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        asset: [string, BigNumber] & {
          contentAddress: string;
          tokenId: BigNumber;
        };
        owner: string;
        token: string;
        price: BigNumber;
        amountOrdered: BigNumber;
        amountFilled: BigNumber;
        isBuyOrder: boolean;
        state: number;
      }
    >;

    getOrderAmounts(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPaymentTotals(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        volume: BigNumber;
        amountPerOrder: BigNumber[];
      }
    >;

    ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAllOrdersData(
      _orderIds: BigNumberish[],
      _isBuyOrder: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyOrderOwners(
      _orderIds: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyOrdersExist(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyOrdersReady(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrders(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderAmounts(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentTotals(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyAllOrdersData(
      _orderIds: BigNumberish[],
      _isBuyOrder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyOrderOwners(
      _orderIds: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyOrdersExist(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyOrdersReady(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillOrders(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderAmounts(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentTotals(
      _orderIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyAllOrdersData(
      _orderIds: BigNumberish[],
      _isBuyOrder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyOrderOwners(
      _orderIds: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyOrdersExist(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyOrdersReady(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
