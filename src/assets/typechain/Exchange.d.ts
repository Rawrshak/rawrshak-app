/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "addSupportedToken(address)": FunctionFragment;
    "cancelOrders(uint256[])": FunctionFragment;
    "claimOrders(uint256[])": FunctionFragment;
    "claimRoyalties()": FunctionFragment;
    "claimableRoyalties()": FunctionFragment;
    "fillBuyOrder(uint256[],uint256,uint256)": FunctionFragment;
    "fillSellOrder(uint256[],uint256,uint256)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "nftsEscrow()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOrder(((address,uint256),address,address,uint256,uint256,bool))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenEscrow()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRoyalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillBuyOrder",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillSellOrder",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftsEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [
      {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftsEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OrderPlaced(address,uint256,tuple)": EventFragment;
    "OrdersClaimed(address,uint256[])": EventFragment;
    "OrdersDeleted(address,uint256[])": EventFragment;
    "OrdersFilled(address,uint256[],uint256[],tuple,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OrderPlacedEvent = TypedEvent<
  [
    string,
    BigNumber,
    [
      [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
      string,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      asset: [string, BigNumber] & {
        contentAddress: string;
        tokenId: BigNumber;
      };
      owner: string;
      token: string;
      price: BigNumber;
      amount: BigNumber;
      isBuyOrder: boolean;
    }
  ] & {
    from: string;
    orderId: BigNumber;
    order: [
      [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
      string,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      asset: [string, BigNumber] & {
        contentAddress: string;
        tokenId: BigNumber;
      };
      owner: string;
      token: string;
      price: BigNumber;
      amount: BigNumber;
      isBuyOrder: boolean;
    };
  }
>;

export type OrdersClaimedEvent = TypedEvent<
  [string, BigNumber[]] & { owner: string; orderIds: BigNumber[] }
>;

export type OrdersDeletedEvent = TypedEvent<
  [string, BigNumber[]] & { owner: string; orderIds: BigNumber[] }
>;

export type OrdersFilledEvent = TypedEvent<
  [
    string,
    BigNumber[],
    BigNumber[],
    [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
    string,
    BigNumber,
    BigNumber
  ] & {
    from: string;
    orderIds: BigNumber[];
    amounts: BigNumber[];
    asset: [string, BigNumber] & { contentAddress: string; tokenId: BigNumber };
    token: string;
    totalAssetsAmount: BigNumber;
    volume: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExchangeInterface;

  functions: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableRoyalties(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    fillBuyOrder(
      _orderIds: BigNumberish[],
      amountToSell: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillSellOrder(
      _orderIds: BigNumberish[],
      amountToBuy: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amountOrdered: BigNumber;
          amountFilled: BigNumber;
          isBuyOrder: boolean;
          state: number;
        }
      ]
    >;

    initialize(
      _royaltyManager: string,
      _orderbook: string,
      _executionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftsEscrow(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenEscrow(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupportedToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRoyalties(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableRoyalties(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  fillBuyOrder(
    _orderIds: BigNumberish[],
    amountToSell: BigNumberish,
    maxSpend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillSellOrder(
    _orderIds: BigNumberish[],
    amountToBuy: BigNumberish,
    maxSpend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      asset: [string, BigNumber] & {
        contentAddress: string;
        tokenId: BigNumber;
      };
      owner: string;
      token: string;
      price: BigNumber;
      amountOrdered: BigNumber;
      amountFilled: BigNumber;
      isBuyOrder: boolean;
      state: number;
    }
  >;

  initialize(
    _royaltyManager: string,
    _orderbook: string,
    _executionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftsEscrow(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOrder(
    _order: {
      asset: { contentAddress: string; tokenId: BigNumberish };
      owner: string;
      token: string;
      price: BigNumberish;
      amount: BigNumberish;
      isBuyOrder: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenEscrow(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupportedToken(_token: string, overrides?: CallOverrides): Promise<void>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoyalties(overrides?: CallOverrides): Promise<void>;

    claimableRoyalties(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    fillBuyOrder(
      _orderIds: BigNumberish[],
      amountToSell: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillSellOrder(
      _orderIds: BigNumberish[],
      amountToBuy: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        asset: [string, BigNumber] & {
          contentAddress: string;
          tokenId: BigNumber;
        };
        owner: string;
        token: string;
        price: BigNumber;
        amountOrdered: BigNumber;
        amountFilled: BigNumber;
        isBuyOrder: boolean;
        state: number;
      }
    >;

    initialize(
      _royaltyManager: string,
      _orderbook: string,
      _executionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nftsEscrow(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenEscrow(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrderPlaced(address,uint256,tuple)"(
      from?: string | null,
      orderId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amount: BigNumber;
          isBuyOrder: boolean;
        }
      ],
      {
        from: string;
        orderId: BigNumber;
        order: [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amount: BigNumber;
          isBuyOrder: boolean;
        };
      }
    >;

    OrderPlaced(
      from?: string | null,
      orderId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amount: BigNumber;
          isBuyOrder: boolean;
        }
      ],
      {
        from: string;
        orderId: BigNumber;
        order: [
          [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
          string,
          string,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          asset: [string, BigNumber] & {
            contentAddress: string;
            tokenId: BigNumber;
          };
          owner: string;
          token: string;
          price: BigNumber;
          amount: BigNumber;
          isBuyOrder: boolean;
        };
      }
    >;

    "OrdersClaimed(address,uint256[])"(
      owner?: string | null,
      orderIds?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { owner: string; orderIds: BigNumber[] }
    >;

    OrdersClaimed(
      owner?: string | null,
      orderIds?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { owner: string; orderIds: BigNumber[] }
    >;

    "OrdersDeleted(address,uint256[])"(
      owner?: string | null,
      orderIds?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { owner: string; orderIds: BigNumber[] }
    >;

    OrdersDeleted(
      owner?: string | null,
      orderIds?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { owner: string; orderIds: BigNumber[] }
    >;

    "OrdersFilled(address,uint256[],uint256[],tuple,address,uint256,uint256)"(
      from?: string | null,
      orderIds?: null,
      amounts?: null,
      asset?: null,
      token?: null,
      totalAssetsAmount?: null,
      volume?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber[],
        BigNumber[],
        [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
        string,
        BigNumber,
        BigNumber
      ],
      {
        from: string;
        orderIds: BigNumber[];
        amounts: BigNumber[];
        asset: [string, BigNumber] & {
          contentAddress: string;
          tokenId: BigNumber;
        };
        token: string;
        totalAssetsAmount: BigNumber;
        volume: BigNumber;
      }
    >;

    OrdersFilled(
      from?: string | null,
      orderIds?: null,
      amounts?: null,
      asset?: null,
      token?: null,
      totalAssetsAmount?: null,
      volume?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber[],
        BigNumber[],
        [string, BigNumber] & { contentAddress: string; tokenId: BigNumber },
        string,
        BigNumber,
        BigNumber
      ],
      {
        from: string;
        orderIds: BigNumber[];
        amounts: BigNumber[];
        asset: [string, BigNumber] & {
          contentAddress: string;
          tokenId: BigNumber;
        };
        token: string;
        totalAssetsAmount: BigNumber;
        volume: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableRoyalties(overrides?: CallOverrides): Promise<BigNumber>;

    fillBuyOrder(
      _orderIds: BigNumberish[],
      amountToSell: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillSellOrder(
      _orderIds: BigNumberish[],
      amountToBuy: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrder(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _royaltyManager: string,
      _orderbook: string,
      _executionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftsEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableRoyalties(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillBuyOrder(
      _orderIds: BigNumberish[],
      amountToSell: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillSellOrder(
      _orderIds: BigNumberish[],
      amountToBuy: BigNumberish,
      maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _royaltyManager: string,
      _orderbook: string,
      _executionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftsEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      _order: {
        asset: { contentAddress: string; tokenId: BigNumberish };
        owner: string;
        token: string;
        price: BigNumberish;
        amount: BigNumberish;
        isBuyOrder: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
