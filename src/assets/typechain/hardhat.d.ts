/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC2981Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Upgradeable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURIUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "ERC1155HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauserUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauserUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC165StorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165StorageUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControlManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlManager__factory>;
    getContractFactory(
      name: "Content",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Content__factory>;
    getContractFactory(
      name: "ContentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentManager__factory>;
    getContractFactory(
      name: "ContentStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentStorage__factory>;
    getContractFactory(
      name: "ContentSubsystemBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentSubsystemBase__factory>;
    getContractFactory(
      name: "ContentFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentFactory__factory>;
    getContractFactory(
      name: "HasContractUri",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasContractUri__factory>;
    getContractFactory(
      name: "HasRoyalty",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasRoyalty__factory>;
    getContractFactory(
      name: "HasTokenUri",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasTokenUri__factory>;
    getContractFactory(
      name: "IAccessControlManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlManager__factory>;
    getContractFactory(
      name: "IContent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContent__factory>;
    getContractFactory(
      name: "IContentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentManager__factory>;
    getContractFactory(
      name: "IContentStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentStorage__factory>;
    getContractFactory(
      name: "IContentSubsystemBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentSubsystemBase__factory>;
    getContractFactory(
      name: "IContractUri",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractUri__factory>;
    getContractFactory(
      name: "Erc20Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Escrow__factory>;
    getContractFactory(
      name: "EscrowBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowBase__factory>;
    getContractFactory(
      name: "Exchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Exchange__factory>;
    getContractFactory(
      name: "ExecutionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutionManager__factory>;
    getContractFactory(
      name: "IErc20Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IErc20Escrow__factory>;
    getContractFactory(
      name: "IEscrowBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEscrowBase__factory>;
    getContractFactory(
      name: "IExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchange__factory>;
    getContractFactory(
      name: "IExecutionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutionManager__factory>;
    getContractFactory(
      name: "INftEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INftEscrow__factory>;
    getContractFactory(
      name: "IOrderbook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderbook__factory>;
    getContractFactory(
      name: "IRoyaltyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyManager__factory>;
    getContractFactory(
      name: "ManagerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerBase__factory>;
    getContractFactory(
      name: "NftEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NftEscrow__factory>;
    getContractFactory(
      name: "Orderbook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Orderbook__factory>;
    getContractFactory(
      name: "RoyaltyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoyaltyManager__factory>;
    getContractFactory(
      name: "LibAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAsset__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "AddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "ExchangeFeesEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeFeesEscrow__factory>;
    getContractFactory(
      name: "IExchangeFeesEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeFeesEscrow__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "LiquidityMining",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityMining__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "TestAccessControlManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAccessControlManager__factory>;
    getContractFactory(
      name: "TestHasContractUri",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHasContractUri__factory>;
    getContractFactory(
      name: "TestHasRoyalty",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHasRoyalty__factory>;
    getContractFactory(
      name: "TestHasTokenUri",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHasTokenUri__factory>;
    getContractFactory(
      name: "MockStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStaking__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "LibContractHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibContractHash__factory>;
    getContractFactory(
      name: "LibUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibUtils__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC2981Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Upgradeable>;
    getContractAt(
      name: "IERC1155MetadataURIUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "ERC1155HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155HolderUpgradeable>;
    getContractAt(
      name: "ERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC20PresetMinterPauserUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauserUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC721HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721HolderUpgradeable>;
    getContractAt(
      name: "ERC165StorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165StorageUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControlManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlManager>;
    getContractAt(
      name: "Content",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Content>;
    getContractAt(
      name: "ContentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentManager>;
    getContractAt(
      name: "ContentStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentStorage>;
    getContractAt(
      name: "ContentSubsystemBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentSubsystemBase>;
    getContractAt(
      name: "ContentFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentFactory>;
    getContractAt(
      name: "HasContractUri",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasContractUri>;
    getContractAt(
      name: "HasRoyalty",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasRoyalty>;
    getContractAt(
      name: "HasTokenUri",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasTokenUri>;
    getContractAt(
      name: "IAccessControlManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlManager>;
    getContractAt(
      name: "IContent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContent>;
    getContractAt(
      name: "IContentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentManager>;
    getContractAt(
      name: "IContentStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentStorage>;
    getContractAt(
      name: "IContentSubsystemBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentSubsystemBase>;
    getContractAt(
      name: "IContractUri",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractUri>;
    getContractAt(
      name: "Erc20Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Escrow>;
    getContractAt(
      name: "EscrowBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowBase>;
    getContractAt(
      name: "Exchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Exchange>;
    getContractAt(
      name: "ExecutionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutionManager>;
    getContractAt(
      name: "IErc20Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IErc20Escrow>;
    getContractAt(
      name: "IEscrowBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEscrowBase>;
    getContractAt(
      name: "IExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchange>;
    getContractAt(
      name: "IExecutionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutionManager>;
    getContractAt(
      name: "INftEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INftEscrow>;
    getContractAt(
      name: "IOrderbook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderbook>;
    getContractAt(
      name: "IRoyaltyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyManager>;
    getContractAt(
      name: "ManagerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerBase>;
    getContractAt(
      name: "NftEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NftEscrow>;
    getContractAt(
      name: "Orderbook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Orderbook>;
    getContractAt(
      name: "RoyaltyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoyaltyManager>;
    getContractAt(
      name: "LibAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAsset>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "AddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "ExchangeFeesEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeFeesEscrow>;
    getContractAt(
      name: "IExchangeFeesEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeFeesEscrow>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "LiquidityMining",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityMining>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "TestAccessControlManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAccessControlManager>;
    getContractAt(
      name: "TestHasContractUri",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHasContractUri>;
    getContractAt(
      name: "TestHasRoyalty",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHasRoyalty>;
    getContractAt(
      name: "TestHasTokenUri",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHasTokenUri>;
    getContractAt(
      name: "MockStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStaking>;
    getContractAt(
      name: "MockToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "LibContractHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibContractHash>;
    getContractAt(
      name: "LibUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibUtils>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
