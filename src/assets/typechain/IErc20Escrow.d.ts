/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IErc20EscrowInterface extends ethers.utils.Interface {
  functions: {
    "addSupportedTokens(address)": FunctionFragment;
    "claimRoyalties(address)": FunctionFragment;
    "claimableTokensByOwner(address)": FunctionFragment;
    "deposit(address,uint256,address,uint256)": FunctionFragment;
    "escrowedTokensByOrder(uint256)": FunctionFragment;
    "isTokenSupported(address)": FunctionFragment;
    "transferPlatformFee(uint256,address,uint256)": FunctionFragment;
    "transferRoyalty(address,address,address,uint256)": FunctionFragment;
    "withdraw(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTokensByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowedTokensByOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenSupported",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlatformFee",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRoyalty",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokensByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowedTokensByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddedTokenSupport(address)": EventFragment;
    "ClaimedRoyalties(address,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedTokenSupport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedRoyalties"): EventFragment;
}

export type AddedTokenSupportEvent = TypedEvent<[string] & { token: string }>;

export type ClaimedRoyaltiesEvent = TypedEvent<
  [string, string[], BigNumber[]] & {
    owner: string;
    tokens: string[];
    amounts: BigNumber[];
  }
>;

export class IErc20Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IErc20EscrowInterface;

  functions: {
    addSupportedTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRoyalties(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableTokensByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    deposit(
      _token: string,
      _orderId: BigNumberish,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrowedTokensByOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTokenSupported(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "transferPlatformFee(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferPlatformFee(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferRoyalty(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _orderId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupportedTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRoyalties(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableTokensByOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  deposit(
    _token: string,
    _orderId: BigNumberish,
    _sender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrowedTokensByOrder(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTokenSupported(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "transferPlatformFee(uint256,address,uint256)"(
    _orderId: BigNumberish,
    _feesEscrow: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferPlatformFee(address,address,address,uint256)"(
    _token: string,
    _sender: string,
    _feesEscrow: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferRoyalty(address,address,address,uint256)"(
    _token: string,
    _sender: string,
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferRoyalty(uint256,address,uint256)"(
    _orderId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _orderId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupportedTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoyalties(_owner: string, overrides?: CallOverrides): Promise<void>;

    claimableTokensByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    deposit(
      _token: string,
      _orderId: BigNumberish,
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowedTokensByOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenSupported(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferPlatformFee(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPlatformFee(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferRoyalty(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _orderId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedTokenSupport(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    AddedTokenSupport(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "ClaimedRoyalties(address,address[],uint256[])"(
      owner?: string | null,
      tokens?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[]],
      { owner: string; tokens: string[]; amounts: BigNumber[] }
    >;

    ClaimedRoyalties(
      owner?: string | null,
      tokens?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[]],
      { owner: string; tokens: string[]; amounts: BigNumber[] }
    >;
  };

  estimateGas: {
    addSupportedTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRoyalties(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableTokensByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _orderId: BigNumberish,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrowedTokensByOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenSupported(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferPlatformFee(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferPlatformFee(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferRoyalty(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _orderId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRoyalties(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableTokensByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _orderId: BigNumberish,
      _sender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrowedTokensByOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenSupported(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferPlatformFee(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferPlatformFee(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _feesEscrow: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferRoyalty(address,address,address,uint256)"(
      _token: string,
      _sender: string,
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferRoyalty(uint256,address,uint256)"(
      _orderId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _orderId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
