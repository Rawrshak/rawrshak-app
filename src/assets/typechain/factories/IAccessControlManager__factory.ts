/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IAccessControlManager,
  IAccessControlManagerInterface,
} from "../IAccessControlManager";

const _abi = [
  {
    inputs: [],
    name: "MINTER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "userMintNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.MintData",
        name: "_data",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "verifyMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAccessControlManager__factory {
  static readonly abi = _abi;
  static createInterface(): IAccessControlManagerInterface {
    return new utils.Interface(_abi) as IAccessControlManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAccessControlManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAccessControlManager;
  }
}
