/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalStakedAmount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "remainingStakedAmount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserClaimableExchangeRewards",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct LibStaking.Reward[]",
        name: "rewards",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserClaimableStakingRewards",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct LibStaking.Reward[]",
        name: "rewards",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_resolver",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userStakedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611d95806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633ae73259116100715780633ae7325914610164578063485cc955146101825780638e4647ee1461019e578063a694fc3a146101ce578063e9fad8ee146101ea578063fc0c546a146101f4576100a9565b806301ffc9a7146100ae5780630fdca8f8146100de57806318a9c7621461010e5780632e1a7d4d1461013e578063372500ab1461015a575b600080fd5b6100c860048036038101906100c391906115d6565b610212565b6040516100d59190611882565b60405180910390f35b6100f860048036038101906100f391906114de565b61028a565b6040516101059190611860565b60405180910390f35b610128600480360381019061012391906114de565b610328565b6040516101359190611860565b60405180910390f35b610158600480360381019061015391906115ff565b61032f565b005b610162610525565b005b61016c610639565b6040516101799190611958565b60405180910390f35b61019c60048036038101906101979190611530565b61063f565b005b6101b860048036038101906101b391906114de565b610734565b6040516101c59190611958565b60405180910390f35b6101e860048036038101906101e391906115ff565b61074c565b005b6101f2610a3b565b005b6101fc610c4a565b60405161020991906117e5565b60405180910390f35b600061021d82610c70565b80610283575060656000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b6060610294610cda565b73ffffffffffffffffffffffffffffffffffffffff1663308e401e836040518263ffffffff1660e01b81526004016102cc91906117e5565b60006040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610321919061156c565b9050919050565b6060919050565b60006099600061033d610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af906118b8565b60405180910390fd5b600081116103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f2906118d8565b60405180910390fd5b610403610cda565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae610426610d93565b6040518263ffffffff1660e01b815260040161044291906117e5565b600060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b5050505061048581610480610d93565b610d9b565b61048d610d93565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882609960006104d1610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161051a92919061199c565b60405180910390a250565b600060996000610533610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a5906118b8565b60405180910390fd5b6105b6610cda565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae6105d9610d93565b6040518263ffffffff1660e01b81526004016105f591906117e5565b600060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b50505050610637610632610d93565b610ea3565b565b60985481565b600060019054906101000a900460ff1680610665575060008054906101000a900460ff16155b6106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b90611938565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106f4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106fc610f3e565b610704611017565b61070e83836110f0565b801561072f5760008060016101000a81548160ff0219169083151502179055505b505050565b60996020528060005260406000206000915090505481565b6000811161078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690611918565b60405180910390fd5b600060985411156107b85780609860008282546107ac9190611a60565b92505081905550610827565b806098819055506107c7610cda565b73ffffffffffffffffffffffffffffffffffffffff166314786e676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050505b61082f610cda565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae610852610d93565b6040518263ffffffff1660e01b815260040161086e91906117e5565b600060405180830381600087803b15801561088857600080fd5b505af115801561089c573d6000803e3d6000fd5b5050505080609960006108ad610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108f69190611a60565b9250508190555061090561127e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd610928610d93565b30846040518463ffffffff1660e01b815260040161094893929190611800565b602060405180830381600087803b15801561096257600080fd5b505af1158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a91906115ad565b506109a3610d93565b73ffffffffffffffffffffffffffffffffffffffff167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9082609960006109e7610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610a3092919061199c565b60405180910390a250565b600060996000610a49610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abb906118b8565b60405180910390fd5b610acc610cda565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae610aef610d93565b6040518263ffffffff1660e01b8152600401610b0b91906117e5565b600060405180830381600087803b158015610b2557600080fd5b505af1158015610b39573d6000803e3d6000fd5b50505050600060996000610b4b610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610bdf60996000610b97610d93565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bda610d93565b610d9b565b610bef610bea610d93565b610ea3565b610bf7610d93565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568826000604051610c3f929190611973565b60405180910390a250565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552aaedb637f17083660e01b6040518263ffffffff1660e01b8152600401610d3e919061189d565b60206040518083038186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190611507565b905090565b600033905090565b81609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dea9190611ab6565b925050819055508160986000828254610e039190611ab6565b92505081905550610e1261127e565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b8152600401610e4c929190611837565b602060405180830381600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e91906115ad565b505050565b610eab610cda565b73ffffffffffffffffffffffffffffffffffffffff1663ef5cfb8c826040518263ffffffff1660e01b8152600401610ee391906117e5565b600060405180830381600087803b158015610efd57600080fd5b505af1158015610f11573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f3a919061156c565b5050565b600060019054906101000a900460ff1680610f64575060008054906101000a900460ff16155b610fa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9a90611938565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ff3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156110145760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061103d575060008054906101000a900460ff16155b61107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107390611938565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110cc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156110ed5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611116575060008054906101000a900460ff16155b611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114c90611938565b60405180910390fd5b60008060019054906101000a900460ff1615905080156111a5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6111ce7f09891775000000000000000000000000000000000000000000000000000000006112a8565b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060988190555081609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156112795760008060016101000a81548160ff0219169083151502179055505b505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611311576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611308906118f8565b60405180910390fd5b600160656000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600061139161138c846119ea565b6119c5565b905080838252602082019050828560408602820111156113b057600080fd5b60005b858110156113e057816113c68882611468565b8452602084019350604083019250506001810190506113b3565b5050509392505050565b6000813590506113f981611d03565b92915050565b60008151905061140e81611d03565b92915050565b600082601f83011261142557600080fd5b815161143584826020860161137e565b91505092915050565b60008151905061144d81611d1a565b92915050565b60008135905061146281611d31565b92915050565b60006040828403121561147a57600080fd5b61148460406119c5565b90506000611494848285016113ff565b60008301525060206114a8848285016114c9565b60208301525092915050565b6000813590506114c381611d48565b92915050565b6000815190506114d881611d48565b92915050565b6000602082840312156114f057600080fd5b60006114fe848285016113ea565b91505092915050565b60006020828403121561151957600080fd5b6000611527848285016113ff565b91505092915050565b6000806040838503121561154357600080fd5b6000611551858286016113ea565b9250506020611562858286016113ea565b9150509250929050565b60006020828403121561157e57600080fd5b600082015167ffffffffffffffff81111561159857600080fd5b6115a484828501611414565b91505092915050565b6000602082840312156115bf57600080fd5b60006115cd8482850161143e565b91505092915050565b6000602082840312156115e857600080fd5b60006115f684828501611453565b91505092915050565b60006020828403121561161157600080fd5b600061161f848285016114b4565b91505092915050565b60006116348383611798565b60408301905092915050565b61164981611aea565b82525050565b61165881611aea565b82525050565b600061166982611a26565b6116738185611a3e565b935061167e83611a16565b8060005b838110156116af5781516116968882611628565b97506116a183611a31565b925050600181019050611682565b5085935050505092915050565b6116c581611afc565b82525050565b6116d481611b08565b82525050565b6116e381611b5e565b82525050565b60006116f6601483611a4f565b915061170182611c10565b602082019050919050565b6000611719601883611a4f565b915061172482611c39565b602082019050919050565b600061173c601c83611a4f565b915061174782611c62565b602082019050919050565b600061175f600e83611a4f565b915061176a82611c8b565b602082019050919050565b6000611782602e83611a4f565b915061178d82611cb4565b604082019050919050565b6040820160008201516117ae6000850182611640565b5060208201516117c160208501826117c7565b50505050565b6117d081611b54565b82525050565b6117df81611b54565b82525050565b60006020820190506117fa600083018461164f565b92915050565b6000606082019050611815600083018661164f565b611822602083018561164f565b61182f60408301846117d6565b949350505050565b600060408201905061184c600083018561164f565b61185960208301846117d6565b9392505050565b6000602082019050818103600083015261187a818461165e565b905092915050565b600060208201905061189760008301846116bc565b92915050565b60006020820190506118b260008301846116cb565b92915050565b600060208201905081810360008301526118d1816116e9565b9050919050565b600060208201905081810360008301526118f18161170c565b9050919050565b600060208201905081810360008301526119118161172f565b9050919050565b6000602082019050818103600083015261193181611752565b9050919050565b6000602082019050818103600083015261195181611775565b9050919050565b600060208201905061196d60008301846117d6565b92915050565b600060408201905061198860008301856117d6565b61199560208301846116da565b9392505050565b60006040820190506119b160008301856117d6565b6119be60208301846117d6565b9392505050565b60006119cf6119e0565b90506119db8282611b70565b919050565b6000604051905090565b600067ffffffffffffffff821115611a0557611a04611bd0565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611a6b82611b54565b9150611a7683611b54565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611aab57611aaa611ba1565b5b828201905092915050565b6000611ac182611b54565b9150611acc83611b54565b925082821015611adf57611ade611ba1565b5b828203905092915050565b6000611af582611b34565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611b6982611b54565b9050919050565b611b7982611bff565b810181811067ffffffffffffffff82111715611b9857611b97611bd0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f55736572206973206e6f74207374616b696e672e000000000000000000000000600082015250565b7f496e76616c696420776974686472617720616d6f756e742e0000000000000000600082015250565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b611d0c81611aea565b8114611d1757600080fd5b50565b611d2381611afc565b8114611d2e57600080fd5b50565b611d3a81611b08565b8114611d4557600080fd5b50565b611d5181611b54565b8114611d5c57600080fd5b5056fea26469706673582212201b44d018bc34a3581817dc25763517c8c4b65513adddf60c72ee0b492f07fb0464736f6c63430008030033";

export class Staking__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(overrides || {}) as Promise<Staking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
