/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestHasRoyalty,
  TestHasRoyaltyInterface,
} from "../TestHasRoyalty";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "parent",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    name: "ContractRoyaltyUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "parent",
        type: "address",
      },
    ],
    name: "ParentSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "parent",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    name: "TokenRoyaltyUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getRoyalty",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_rate",
        type: "uint24",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "parent",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_rate",
        type: "uint24",
      },
    ],
    name: "setContractRoyalty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setParent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "royaltyReceiver",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "royaltyRate",
            type: "uint24",
          },
        ],
        internalType: "struct LibAsset.AssetRoyalties[]",
        name: "_assets",
        type: "tuple[]",
      },
    ],
    name: "setTokenRoyaltiesBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506110bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806352104efd1161005b57806352104efd146100ff57806360f96a8f1461011b57806365bd62d614610139578063fd53da92146101555761007d565b806301ffc9a7146100825780631499c592146100b25780631af9cf49146100ce575b600080fd5b61009c60048036038101906100979190610c17565b610171565b6040516100a99190610d43565b60405180910390f35b6100cc60048036038101906100c79190610b71565b6101e9565b005b6100e860048036038101906100e39190610c40565b6101ec565b6040516100f6929190610d1a565b60405180910390f35b61011960048036038101906101149190610b9a565b610201565b005b61012361020f565b6040516101309190610cff565b60405180910390f35b610153600480360381019061014e9190610b9a565b61021e565b005b61016f600480360381019061016a9190610bd6565b61030b565b005b600061017c82610403565b806101e2575060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b50565b6000806101f88361046d565b91509150915091565b61020b8282610585565b5050565b6000610219610650565b905090565b600060019054906101000a900460ff1680610244575060008054906101000a900460ff16155b610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610d7e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156102d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6102dd838361067a565b6102e561075f565b80156103065760008060016101000a81548160ff0219169083151502179055505b505050565b60005b81518110156103ff576103ee828281518110610353577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151838381518110610398577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518484815181106103dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151610838565b806103f890610ed4565b905061030e565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff166067600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610540576067600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166067600085815260200190815260200160002060000160149054906101000a900462ffffff1691509150610580565b606660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606660000160149054906101000a900462ffffff16915091505b915091565b61058f8282610968565b81606660000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606660000160146101000a81548162ffffff021916908362ffffff1602179055506105fd610650565b73ffffffffffffffffffffffffffffffffffffffff167fccfc46341a99169cb6cbe189720cd8765e23a882af2e606e234ca95e38e6297d8383604051610644929190610d1a565b60405180910390a25050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106a0575060008054906101000a900460ff16155b6106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690610d7e565b60405180910390fd5b60008060019054906101000a900460ff16159050801561072f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6107398383610585565b801561075a5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680610785575060008054906101000a900460ff16155b6107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90610d7e565b60405180910390fd5b60008060019054906101000a900460ff161590508015610814576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156108355760008060016101000a81548160ff0219169083151502179055505b50565b620f42408162ffffff161115610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610d9e565b60405180910390fd5b816067600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806067600085815260200190815260200160002060000160146101000a81548162ffffff021916908362ffffff16021790555082610914610650565b73ffffffffffffffffffffffffffffffffffffffff167fb53f37a855bdfe75416a9173f1f065a6f8364859a21ae2c214595c6ab78ea1db848460405161095b929190610d1a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90610d5e565b60405180910390fd5b620f42408162ffffff161115610a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1a90610d9e565b60405180910390fd5b5050565b6000610a3a610a3584610de3565b610dbe565b90508083825260208201905082856060860282011115610a5957600080fd5b60005b85811015610a895781610a6f8882610ae7565b845260208401935060608301925050600181019050610a5c565b5050509392505050565b600081359050610aa28161102d565b92915050565b600082601f830112610ab957600080fd5b8135610ac9848260208601610a27565b91505092915050565b600081359050610ae181611044565b92915050565b600060608284031215610af957600080fd5b610b036060610dbe565b90506000610b1384828501610b5c565b6000830152506020610b2784828501610a93565b6020830152506040610b3b84828501610b47565b60408301525092915050565b600081359050610b568161105b565b92915050565b600081359050610b6b81611072565b92915050565b600060208284031215610b8357600080fd5b6000610b9184828501610a93565b91505092915050565b60008060408385031215610bad57600080fd5b6000610bbb85828601610a93565b9250506020610bcc85828601610b47565b9150509250929050565b600060208284031215610be857600080fd5b600082013567ffffffffffffffff811115610c0257600080fd5b610c0e84828501610aa8565b91505092915050565b600060208284031215610c2957600080fd5b6000610c3784828501610ad2565b91505092915050565b600060208284031215610c5257600080fd5b6000610c6084828501610b5c565b91505092915050565b610c7281610e20565b82525050565b610c8181610e32565b82525050565b6000610c94601783610e0f565b9150610c9f82610f8c565b602082019050919050565b6000610cb7602e83610e0f565b9150610cc282610fb5565b604082019050919050565b6000610cda601083610e0f565b9150610ce582611004565b602082019050919050565b610cf981610e8a565b82525050565b6000602082019050610d146000830184610c69565b92915050565b6000604082019050610d2f6000830185610c69565b610d3c6020830184610cf0565b9392505050565b6000602082019050610d586000830184610c78565b92915050565b60006020820190508181036000830152610d7781610c87565b9050919050565b60006020820190508181036000830152610d9781610caa565b9050919050565b60006020820190508181036000830152610db781610ccd565b9050919050565b6000610dc8610dd9565b9050610dd48282610ea3565b919050565b6000604051905090565b600067ffffffffffffffff821115610dfe57610dfd610f4c565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000610e2b82610e6a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b610eac82610f7b565b810181811067ffffffffffffffff82111715610ecb57610eca610f4c565b5b80604052505050565b6000610edf82610e99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f1257610f11610f1d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e76616c6964204163636f756e742041646472657373000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e76616c696420466565205261746500000000000000000000000000000000600082015250565b61103681610e20565b811461104157600080fd5b50565b61104d81610e3e565b811461105857600080fd5b50565b61106481610e8a565b811461106f57600080fd5b50565b61107b81610e99565b811461108657600080fd5b5056fea26469706673582212201c2e3ec9c1753b1484f7c536d2b515db4a74efefe1f7dced0d946ef22ef7415c64736f6c63430008030033";

export class TestHasRoyalty__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestHasRoyalty> {
    return super.deploy(overrides || {}) as Promise<TestHasRoyalty>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestHasRoyalty {
    return super.attach(address) as TestHasRoyalty;
  }
  connect(signer: Signer): TestHasRoyalty__factory {
    return super.connect(signer) as TestHasRoyalty__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHasRoyaltyInterface {
    return new utils.Interface(_abi) as TestHasRoyaltyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHasRoyalty {
    return new Contract(address, _abi, signerOrProvider) as TestHasRoyalty;
  }
}
