/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestHasRoyalty,
  TestHasRoyaltyInterface,
} from "../TestHasRoyalty";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "parent",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    name: "ContractRoyaltyUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "parent",
        type: "address",
      },
    ],
    name: "ParentSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "parent",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    name: "TokenRoyaltyUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getRoyalty",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "rate",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_rate",
        type: "uint24",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "parent",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_rate",
        type: "uint24",
      },
    ],
    name: "setContractRoyalty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setParent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "royaltyReceiver",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "royaltyRate",
            type: "uint24",
          },
        ],
        internalType: "struct LibAsset.AssetRoyalties[]",
        name: "_assets",
        type: "tuple[]",
      },
    ],
    name: "setTokenRoyaltiesBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506110cd806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806352104efd1161005b57806352104efd146100ff57806360f96a8f1461011b57806365bd62d614610139578063fd53da92146101555761007d565b806301ffc9a7146100825780631499c592146100b25780631af9cf49146100ce575b600080fd5b61009c60048036038101906100979190610c25565b610171565b6040516100a99190610d51565b60405180910390f35b6100cc60048036038101906100c79190610b7f565b6101e9565b005b6100e860048036038101906100e39190610c4e565b6101ec565b6040516100f6929190610d28565b60405180910390f35b61011960048036038101906101149190610ba8565b610201565b005b61012361020f565b6040516101309190610d0d565b60405180910390f35b610153600480360381019061014e9190610ba8565b61021e565b005b61016f600480360381019061016a9190610be4565b61030b565b005b600061017c82610403565b806101e2575060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b50565b6000806101f88361046d565b91509150915091565b61020b8282610585565b5050565b60006102196105ea565b905090565b600060019054906101000a900460ff1680610244575060008054906101000a900460ff16155b610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610d8c565b60405180910390fd5b60008060019054906101000a900460ff1615905080156102d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6102dd8383610614565b6102e56106f9565b80156103065760008060016101000a81548160ff0219169083151502179055505b505050565b60005b81518110156103ff576103ee828281518110610353577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151838381518110610398577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518484815181106103dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001516107d2565b806103f890610ee2565b905061030e565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff166067600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610540576067600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166067600085815260200190815260200160002060000160149054906101000a900462ffffff1691509150610580565b606660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606660000160149054906101000a900462ffffff16915091505b915091565b61058f8282610902565b6105976105ea565b73ffffffffffffffffffffffffffffffffffffffff167fccfc46341a99169cb6cbe189720cd8765e23a882af2e606e234ca95e38e6297d83836040516105de929190610d28565b60405180910390a25050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff168061063a575060008054906101000a900460ff16155b610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610d8c565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106c9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106d38383610902565b80156106f45760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff168061071f575060008054906101000a900460ff16155b61075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075590610d8c565b60405180910390fd5b60008060019054906101000a900460ff1615905080156107ae576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156107cf5760008060016101000a81548160ff0219169083151502179055505b50565b620f42408162ffffff16111561081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490610dac565b60405180910390fd5b816067600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806067600085815260200190815260200160002060000160146101000a81548162ffffff021916908362ffffff160217905550826108ae6105ea565b73ffffffffffffffffffffffffffffffffffffffff167fb53f37a855bdfe75416a9173f1f065a6f8364859a21ae2c214595c6ab78ea1db84846040516108f5929190610d28565b60405180910390a3505050565b61090c8282610976565b81606660000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606660000160146101000a81548162ffffff021916908362ffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90610d6c565b60405180910390fd5b620f42408162ffffff161115610a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2890610dac565b60405180910390fd5b5050565b6000610a48610a4384610df1565b610dcc565b90508083825260208201905082856060860282011115610a6757600080fd5b60005b85811015610a975781610a7d8882610af5565b845260208401935060608301925050600181019050610a6a565b5050509392505050565b600081359050610ab08161103b565b92915050565b600082601f830112610ac757600080fd5b8135610ad7848260208601610a35565b91505092915050565b600081359050610aef81611052565b92915050565b600060608284031215610b0757600080fd5b610b116060610dcc565b90506000610b2184828501610b6a565b6000830152506020610b3584828501610aa1565b6020830152506040610b4984828501610b55565b60408301525092915050565b600081359050610b6481611069565b92915050565b600081359050610b7981611080565b92915050565b600060208284031215610b9157600080fd5b6000610b9f84828501610aa1565b91505092915050565b60008060408385031215610bbb57600080fd5b6000610bc985828601610aa1565b9250506020610bda85828601610b55565b9150509250929050565b600060208284031215610bf657600080fd5b600082013567ffffffffffffffff811115610c1057600080fd5b610c1c84828501610ab6565b91505092915050565b600060208284031215610c3757600080fd5b6000610c4584828501610ae0565b91505092915050565b600060208284031215610c6057600080fd5b6000610c6e84828501610b6a565b91505092915050565b610c8081610e2e565b82525050565b610c8f81610e40565b82525050565b6000610ca2601783610e1d565b9150610cad82610f9a565b602082019050919050565b6000610cc5602e83610e1d565b9150610cd082610fc3565b604082019050919050565b6000610ce8601083610e1d565b9150610cf382611012565b602082019050919050565b610d0781610e98565b82525050565b6000602082019050610d226000830184610c77565b92915050565b6000604082019050610d3d6000830185610c77565b610d4a6020830184610cfe565b9392505050565b6000602082019050610d666000830184610c86565b92915050565b60006020820190508181036000830152610d8581610c95565b9050919050565b60006020820190508181036000830152610da581610cb8565b9050919050565b60006020820190508181036000830152610dc581610cdb565b9050919050565b6000610dd6610de7565b9050610de28282610eb1565b919050565b6000604051905090565b600067ffffffffffffffff821115610e0c57610e0b610f5a565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000610e3982610e78565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b610eba82610f89565b810181811067ffffffffffffffff82111715610ed957610ed8610f5a565b5b80604052505050565b6000610eed82610ea7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f2057610f1f610f2b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e76616c6964204163636f756e742041646472657373000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e76616c696420466565205261746500000000000000000000000000000000600082015250565b61104481610e2e565b811461104f57600080fd5b50565b61105b81610e4c565b811461106657600080fd5b50565b61107281610e98565b811461107d57600080fd5b50565b61108981610ea7565b811461109457600080fd5b5056fea264697066735822122081d4e6f5e83e407d16a69ff31489e25cb830c7ab96034abb088e0bc7771fa87164736f6c63430008030033";

export class TestHasRoyalty__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestHasRoyalty> {
    return super.deploy(overrides || {}) as Promise<TestHasRoyalty>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestHasRoyalty {
    return super.attach(address) as TestHasRoyalty;
  }
  connect(signer: Signer): TestHasRoyalty__factory {
    return super.connect(signer) as TestHasRoyalty__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHasRoyaltyInterface {
    return new utils.Interface(_abi) as TestHasRoyaltyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHasRoyalty {
    return new Contract(address, _abi, signerOrProvider) as TestHasRoyalty;
  }
}
