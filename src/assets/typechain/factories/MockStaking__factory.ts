/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStaking, MockStakingInterface } from "../MockStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_resolver",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userStakedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161093238038061093283398181016040528101906100329190610096565b600060338190555080603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610090816100f1565b92915050565b6000602082840312156100a857600080fd5b60006100b684828501610081565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b61081b806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e1a7d4d146100515780633ae732591461006d5780638e4647ee1461008b578063a694fc3a146100bb575b600080fd5b61006b600480360381019061006691906105ef565b6100d7565b005b610075610273565b604051610082919061067b565b60405180910390f35b6100a560048036038101906100a0919061059d565b610279565b6040516100b2919061067b565b60405180910390f35b6100d560048036038101906100d091906105ef565b610291565b005b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552aaedb637f17083660e01b6040518263ffffffff1660e01b81526004016101399190610660565b60206040518083038186803b15801561015157600080fd5b505afa158015610165573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018991906105c6565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae6101ac610556565b6040518263ffffffff1660e01b81526004016101c89190610645565b600060405180830381600087803b1580156101e257600080fd5b505af11580156101f6573d6000803e3d6000fd5b505050508060346000610207610556565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461025091906106ec565b92505081905550806033600082825461026991906106ec565b9250508190555050565b60335481565b60346020528060005260406000206000915090505481565b600060335411156102ba5780603360008282546102ae9190610696565b925050819055506103d3565b80603381905550603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552aaedb637f17083660e01b6040518263ffffffff1660e01b81526004016103239190610660565b60206040518083038186803b15801561033b57600080fd5b505afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037391906105c6565b73ffffffffffffffffffffffffffffffffffffffff166314786e676040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103ba57600080fd5b505af11580156103ce573d6000803e3d6000fd5b505050505b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552aaedb637f17083660e01b6040518263ffffffff1660e01b81526004016104359190610660565b60206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048591906105c6565b73ffffffffffffffffffffffffffffffffffffffff1663f31878ae6104a8610556565b6040518263ffffffff1660e01b81526004016104c49190610645565b600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505050508060346000610503610556565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054c9190610696565b9250508190555050565b600033905090565b60008135905061056d816107b7565b92915050565b600081519050610582816107b7565b92915050565b600081359050610597816107ce565b92915050565b6000602082840312156105af57600080fd5b60006105bd8482850161055e565b91505092915050565b6000602082840312156105d857600080fd5b60006105e684828501610573565b91505092915050565b60006020828403121561060157600080fd5b600061060f84828501610588565b91505092915050565b61062181610720565b82525050565b61063081610732565b82525050565b61063f8161077e565b82525050565b600060208201905061065a6000830184610618565b92915050565b60006020820190506106756000830184610627565b92915050565b60006020820190506106906000830184610636565b92915050565b60006106a18261077e565b91506106ac8361077e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106e1576106e0610788565b5b828201905092915050565b60006106f78261077e565b91506107028361077e565b92508282101561071557610714610788565b5b828203905092915050565b600061072b8261075e565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6107c081610720565b81146107cb57600080fd5b50565b6107d78161077e565b81146107e257600080fd5b5056fea2646970667358221220f4473d602820e0930fbdb8c270fb57ffdae934632bde578104cd8b569722069c64736f6c63430008030033";

export class MockStaking__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStaking> {
    return super.deploy(_resolver, overrides || {}) as Promise<MockStaking>;
  }
  getDeployTransaction(
    _resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_resolver, overrides || {});
  }
  attach(address: string): MockStaking {
    return super.attach(address) as MockStaking;
  }
  connect(signer: Signer): MockStaking__factory {
    return super.connect(signer) as MockStaking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakingInterface {
    return new utils.Interface(_abi) as MockStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStaking {
    return new Contract(address, _abi, signerOrProvider) as MockStaking;
  }
}
