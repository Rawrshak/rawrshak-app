/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IAddressResolver,
  IAddressResolverInterface,
} from "../IAddressResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "AddressRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_id",
        type: "bytes4",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_id",
        type: "bytes4",
      },
    ],
    name: "getAddressWithCheck",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_ids",
        type: "bytes4[]",
      },
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "registerAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAddressResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IAddressResolverInterface {
    return new utils.Interface(_abi) as IAddressResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAddressResolver {
    return new Contract(address, _abi, signerOrProvider) as IAddressResolver;
  }
}
