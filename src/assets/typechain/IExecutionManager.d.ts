/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IExecutionManagerInterface extends ethers.utils.Interface {
  functions: {
    "addSupportedToken(address)": FunctionFragment;
    "cancelOrders(uint256[])": FunctionFragment;
    "claimOrders(address,uint256[])": FunctionFragment;
    "executeBuyOrder(address,uint256[],uint256[],uint256[],(address,uint256))": FunctionFragment;
    "executeSellOrder(address,uint256[],uint256[],uint256[],address)": FunctionFragment;
    "nftsEscrow()": FunctionFragment;
    "placeBuyOrder(uint256,address,address,uint256)": FunctionFragment;
    "placeSellOrder(uint256,address,(address,uint256),uint256)": FunctionFragment;
    "tokenEscrow()": FunctionFragment;
    "verifyToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOrders",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBuyOrder",
    values: [
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      { contentAddress: string; tokenId: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSellOrder",
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftsEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBuyOrder",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeSellOrder",
    values: [
      BigNumberish,
      string,
      { contentAddress: string; tokenId: BigNumberish },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifyToken", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftsEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class IExecutionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExecutionManagerInterface;

  functions: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOrders(
      _user: string,
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBuyOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _asset: { contentAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSellOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftsEscrow(overrides?: CallOverrides): Promise<[string]>;

    placeBuyOrder(
      _orderId: BigNumberish,
      _token: string,
      _sender: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeSellOrder(
      _orderId: BigNumberish,
      _sender: string,
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenEscrow(overrides?: CallOverrides): Promise<[string]>;

    verifyToken(_token: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addSupportedToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOrders(
    _user: string,
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBuyOrder(
    _user: string,
    _orderIds: BigNumberish[],
    _paymentPerOrder: BigNumberish[],
    _amounts: BigNumberish[],
    _asset: { contentAddress: string; tokenId: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSellOrder(
    _user: string,
    _orderIds: BigNumberish[],
    _paymentPerOrder: BigNumberish[],
    _amounts: BigNumberish[],
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftsEscrow(overrides?: CallOverrides): Promise<string>;

  placeBuyOrder(
    _orderId: BigNumberish,
    _token: string,
    _sender: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeSellOrder(
    _orderId: BigNumberish,
    _sender: string,
    _asset: { contentAddress: string; tokenId: BigNumberish },
    _assetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenEscrow(overrides?: CallOverrides): Promise<string>;

  verifyToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addSupportedToken(_token: string, overrides?: CallOverrides): Promise<void>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOrders(
      _user: string,
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeBuyOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _asset: { contentAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    executeSellOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nftsEscrow(overrides?: CallOverrides): Promise<string>;

    placeBuyOrder(
      _orderId: BigNumberish,
      _token: string,
      _sender: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeSellOrder(
      _orderId: BigNumberish,
      _sender: string,
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenEscrow(overrides?: CallOverrides): Promise<string>;

    verifyToken(_token: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOrders(
      _user: string,
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBuyOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _asset: { contentAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSellOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftsEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    placeBuyOrder(
      _orderId: BigNumberish,
      _token: string,
      _sender: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeSellOrder(
      _orderId: BigNumberish,
      _sender: string,
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    verifyToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOrders(
      _user: string,
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBuyOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _asset: { contentAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSellOrder(
      _user: string,
      _orderIds: BigNumberish[],
      _paymentPerOrder: BigNumberish[],
      _amounts: BigNumberish[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftsEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBuyOrder(
      _orderId: BigNumberish,
      _token: string,
      _sender: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeSellOrder(
      _orderId: BigNumberish,
      _sender: string,
      _asset: { contentAddress: string; tokenId: BigNumberish },
      _assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
